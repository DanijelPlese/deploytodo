{"version":3,"sources":["index.js"],"names":["display","justifyContent","flexDirection","appTitle","margin","fontSize","alignSelf","input","height","width","submit","list","ToDo","props","componentDidMount","tasks","JSON","parse","localStorage","getItem","setState","state","task","updateTasks","bind","removeTask","value","this","newTasks","name","id","nanoid","setItem","stringify","filter","style","type","onChange","event","newTask","target","placeholder","onClick","disabled","map","item","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6MAIMA,EAAU,CACdA,QAAS,OACTC,eAAgB,SAChBC,cAAe,UAEXC,EAAW,CACfC,OAAQ,GACRC,SAAU,GACVC,UAAW,UAEPC,EAAQ,CACZH,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPI,EAAS,CACbN,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPK,EAAO,CACXN,SAAU,IAGNO,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,kBAAoB,WAClB,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC1CJ,GACF,EAAKK,SAAS,CACZL,WAbJ,EAAKM,MAAQ,CACXN,MAAO,GACPO,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARD,E,oDAqBXE,GACNC,KAAKP,SAAS,CACZE,KAAMI,M,oCAIK,IAAD,OACNE,EAAQ,YAAOD,KAAKN,MAAMN,OAChCY,KAAKP,SACH,CACEL,MAAM,CACJ,CACEc,KAAMF,KAAKN,MAAMC,KACjBQ,GAAIC,YAAO,KAHV,mBAKAH,IAELN,KAAM,KAER,WACEJ,aAAac,QAAQ,QAAShB,KAAKiB,UAAU,EAAKZ,MAAMN,a,iCAKnDe,GACT,IAAMF,EAAW,YAAID,KAAKN,MAAMN,OAAOmB,QAAO,SAACZ,GAAD,OAAUA,EAAKQ,KAAOA,KACpEH,KAAKP,SACH,CACEL,MAAM,YAAKa,KAEb,WACEV,aAAac,QAAQ,QAAShB,KAAKiB,UAAUL,S,+BAKzC,IAAD,OACP,OACE,uBAAMO,MAAOnC,EAAb,UACE,qBAAKmC,MAAOhC,EAAZ,SAAuBwB,KAAKd,MAAMgB,OAClC,uBACEM,MAAO5B,EACP6B,KAAK,OACLV,MAAOC,KAAKN,MAAMC,KAClBe,SAAU,SAACC,GAAD,OAAW,EAAKC,QAAQD,EAAME,OAAOd,QAC/Ce,YAAY,kBAEd,wBACEN,MAAOzB,EACPgC,QAASf,KAAKJ,YACdoB,SAA8B,KAApBhB,KAAKN,MAAMC,KAHvB,sBAOA,oBAAIa,MAAOxB,EAAX,SACGgB,KAAKN,MAAMN,MAAM6B,KAAI,SAACC,GACrB,OACE,+BACGA,EAAKhB,KACN,wBACEa,QAAS,WACP,EAAKjB,WAAWoB,EAAKf,KAEvBK,MAAOzB,EAJT,sBAFOmC,EAAKf,gB,GAhFTgB,IAAMC,WAkGzBC,IAASC,OACP,cAACrC,EAAD,CAAMiB,KAAM,iBACZqB,SAASC,eAAe,W","file":"static/js/main.feadac07.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { nanoid } from \"nanoid\";\n\nconst display = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst appTitle = {\n  margin: 20,\n  fontSize: 70,\n  alignSelf: \"center\",\n};\nconst input = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 800,\n  alignSelf: \"center\",\n};\nconst submit = {\n  margin: 20,\n  fontSize: 20,\n  height: 40,\n  width: 130,\n  alignSelf: \"center\",\n};\nconst list = {\n  fontSize: 30,\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      task: \"\",\n    };\n    this.updateTasks = this.updateTasks.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n  }\n  // Checks if stored information exists and then loads them as our starting state.\n  // Data is visible on our page.\n  componentDidMount = () => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    if (tasks) {\n      this.setState({\n        tasks,\n      });\n    }\n  };\n  // Gets data of last entry.\n  newTask(value) {\n    this.setState({\n      task: value,\n    });\n  }\n  // Adds latest entered task throught input and becomes one of the objects in our tasks array and is also stored locally.\n  updateTasks() {\n    const newTasks = [...this.state.tasks];\n    this.setState(\n      {\n        tasks: [\n          {\n            name: this.state.task,\n            id: nanoid(3),\n          },\n          ...newTasks,\n        ],\n        task: \"\",\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n      }\n    );\n  }\n  // Removes task from our tasks array and local storage.\n  removeTask(id) {\n    const newTasks = [...this.state.tasks].filter((task) => task.id !== id);\n    this.setState(\n      {\n        tasks: [...newTasks],\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n      }\n    );\n  }\n\n  render() {\n    return (\n      <form style={display}>\n        <div style={appTitle}>{this.props.name}</div>\n        <input\n          style={input}\n          type=\"text\"\n          value={this.state.task}\n          onChange={(event) => this.newTask(event.target.value)}\n          placeholder=\"  Add Task...\"\n        />\n        <button\n          style={submit}\n          onClick={this.updateTasks}\n          disabled={this.state.task === \"\" ? true : false}\n        >\n          Add Task\n        </button>\n        <ul style={list}>\n          {this.state.tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.name}\n                <button\n                  onClick={() => {\n                    this.removeTask(item.id);\n                  }}\n                  style={submit}\n                >\n                  Remove\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </form>\n    );\n  }\n}\nReactDOM.render(\n  <ToDo name={\"ToDo Tracker\"} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}