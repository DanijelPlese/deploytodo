{"version":3,"sources":["index.js"],"names":["display","justifyContent","flexDirection","appTitle","margin","fontSize","alignSelf","input","height","width","submit","list","ToDo","props","tasks","localStorage","getItem","JSON","parse","state","task","updateTasks","bind","clearAllTasks","value","this","setState","newTasks","name","id","nanoid","setItem","stringify","filter","clear","console","log","style","type","onChange","event","newTask","target","placeholder","onClick","disabled","map","item","removeTask","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6MAIMA,EAAU,CACdA,QAAS,OACTC,eAAgB,SAChBC,cAAe,UAEXC,EAAW,CACfC,OAAQ,GACRC,SAAU,GACVC,UAAW,UAEPC,EAAQ,CACZH,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPI,EAAS,CACbN,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPK,EAAO,CACXN,SAAU,IAGNO,E,kDACJ,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIC,EAAQ,GAHK,OAKbC,aAAaC,QAAQ,WACvBF,EAAQG,KAAKC,MAAMH,aAAaC,QAAQ,WAE1C,EAAKG,MAAQ,CACXL,MAAOA,EACPM,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAbJ,E,oDAgBXE,GACNC,KAAKC,SAAS,CACZN,KAAMI,M,oCAIK,IAAD,OACJG,EAAQ,YAAOF,KAAKN,MAAML,OAChCW,KAAKC,SACH,CACEZ,MAAM,CACJ,CACEc,KAAMH,KAAKN,MAAMC,KACjBS,GAAIC,YAAO,KAHV,mBAKAH,IAELP,KAAM,KAER,WACEL,aAAagB,QAAQ,QAASd,KAAKe,UAAU,EAAKb,MAAML,a,iCAKrDe,GACT,IAAMF,EAAW,YAAIF,KAAKN,MAAML,OAAOmB,QAAO,SAACb,GAAD,OAAUA,EAAKS,KAAOA,KACpEJ,KAAKC,SACH,CACEZ,MAAM,YAAKa,KAEb,WACEZ,aAAagB,QAAQ,QAASd,KAAKe,UAAUL,S,sCAMjDF,KAAKC,SACH,CACEZ,MAAO,KAET,WACEC,aAAamB,WAGjBC,QAAQC,IAAIX,KAAKN,MAAML,S,+BAGf,IAAD,OACP,OACE,uBAAMuB,MAAOrC,EAAb,UACE,qBAAKqC,MAAOlC,EAAZ,SAAuBsB,KAAKZ,MAAMe,OAClC,uBACES,MAAO9B,EACP+B,KAAK,OACLd,MAAOC,KAAKN,MAAMC,KAClBmB,SAAU,SAACC,GAAD,OAAW,EAAKC,QAAQD,EAAME,OAAOlB,QAC/CmB,YAAY,kBAEd,wBACEN,MAAO3B,EACPkC,QAASnB,KAAKJ,YACdwB,SAA8B,KAApBpB,KAAKN,MAAMC,KAHvB,sBAOA,wBAAQiB,MAAO3B,EAAQkC,QAASnB,KAAKF,cAArC,6BAGA,oBAAIc,MAAO1B,EAAX,SACGc,KAAKN,MAAML,MAAMgC,KAAI,SAACC,GACrB,OACE,+BACGA,EAAKnB,KACN,wBACEgB,QAAS,WACP,EAAKI,WAAWD,EAAKlB,KAEvBQ,MAAO3B,EAJT,sBAFOqC,EAAKlB,gB,GA1FToB,IAAMC,WA4GzBC,IAASC,OACP,cAACxC,EAAD,CAAMgB,KAAM,iBACZyB,SAASC,eAAe,W","file":"static/js/main.e8c362d1.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { nanoid } from \"nanoid\";\n\nconst display = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst appTitle = {\n  margin: 20,\n  fontSize: 70,\n  alignSelf: \"center\",\n};\nconst input = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 800,\n  alignSelf: \"center\",\n};\nconst submit = {\n  margin: 20,\n  fontSize: 18,\n  height: 40,\n  width: 140,\n  alignSelf: \"center\",\n};\nconst list = {\n  fontSize: 30,\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let tasks = [];\n  // Checks if stored information exists and loads them as our starting state.\n    if (localStorage.getItem('tasks')) {\n      tasks = JSON.parse(localStorage.getItem('tasks'));\n    }\n    this.state = {\n      tasks: tasks,\n      task: \"\",\n    };\n    this.updateTasks = this.updateTasks.bind(this);\n    this.clearAllTasks = this.clearAllTasks.bind(this);\n  }\n  // Gets data of last entry.\n  newTask(value) {\n    this.setState({\n      task: value,\n    });\n  }\n  // Adds latest entered task throught input and becomes one of the objects in our tasks array and is also stored locally.\n  updateTasks() {\n      const newTasks = [...this.state.tasks];\n      this.setState(\n        {\n          tasks: [\n            {\n              name: this.state.task,\n              id: nanoid(3),\n            },\n            ...newTasks,\n          ],\n          task: \"\",\n        },\n        () => {\n          localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n        }\n      );    \n  }\n  // Removes task from our tasks array and local storage.\n  removeTask(id) {\n    const newTasks = [...this.state.tasks].filter((task) => task.id !== id);\n    this.setState(\n      {\n        tasks: [...newTasks],\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n      }\n    );\n  }\n// Removes all items in array and clears all data in local storage\n  clearAllTasks() {\n    this.setState(\n      {\n        tasks: []\n      },\n      () => {\n        localStorage.clear();\n      }\n    );\n    console.log(this.state.tasks)\n  }\n\n  render() {\n    return (\n      <form style={display}>\n        <div style={appTitle}>{this.props.name}</div>\n        <input\n          style={input}\n          type=\"text\"\n          value={this.state.task}\n          onChange={(event) => this.newTask(event.target.value)}\n          placeholder=\"  Add Task...\"\n        />\n        <button\n          style={submit}\n          onClick={this.updateTasks}\n          disabled={this.state.task === \"\" ? true : false}\n        >\n          Add Task\n        </button>\n        <button style={submit} onClick={this.clearAllTasks}>\n          Clear All Tasks\n        </button>\n        <ul style={list}>\n          {this.state.tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.name}\n                <button\n                  onClick={() => {\n                    this.removeTask(item.id);\n                  }}\n                  style={submit}\n                >\n                  Remove\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </form>\n    );\n  }\n}\nReactDOM.render(\n  <ToDo name={\"ToDo Tracker\"} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}