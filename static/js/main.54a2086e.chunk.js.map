{"version":3,"sources":["index.js"],"names":["display","justifyContent","flexDirection","appTitle","margin","fontSize","alignSelf","input","height","width","submit","list","ToDo","props","state","tasks","task","updateTasks","bind","removeTask","localStorage","getItem","this","setState","JSON","parse","value","newTasks","name","id","nanoid","setItem","stringify","filter","style","type","onChange","event","newTask","target","placeholder","onClick","disabled","map","item","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qNAKMA,EAAU,CACdA,QAAS,OACTC,eAAgB,SAChBC,cAAe,UAEXC,EAAW,CACfC,OAAQ,GACRC,SAAU,GACVC,UAAW,UAEPC,EAAQ,CACZH,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPI,EAAS,CACbN,OAAQ,GACRC,SAAU,GACVG,OAAQ,GACRC,MAAO,IACPH,UAAW,UAEPK,EAAO,CACXN,SAAU,IAGNO,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,GACPC,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARD,E,wEAajBE,aAAaC,QAAQ,UACnBC,KAAKC,SAAS,CACZR,MAAOS,KAAKC,MAAML,aAAaC,QAAQ,c,8BAIrCK,GACNJ,KAAKC,SAAS,CACZP,KAAMU,M,oCAIK,IAAD,OACNC,EAAQ,YAAOL,KAAKR,MAAMC,OAChCO,KAAKC,SACH,CACER,MAAM,CACJ,CACEa,KAAMN,KAAKR,MAAME,KACjBa,GAAIC,YAAO,KAHV,mBAKAH,IAELX,KAAM,KAER,WACEI,aAAaW,QAAQ,QAASP,KAAKQ,UAAU,EAAKlB,MAAMC,a,iCAKnDc,GACT,IAAMF,EAAW,YAAIL,KAAKR,MAAMC,OAAOkB,QAAO,SAACjB,GAAD,OAAUA,EAAKa,KAAOA,KACpEP,KAAKC,SACH,CACER,MAAM,YAAKY,KAEb,WACEP,aAAaW,QAAQ,QAASP,KAAKQ,UAAUL,S,+BAKzC,IAAD,OACP,OACE,uBAAMO,MAAOlC,EAAb,UACE,qBAAKkC,MAAO/B,EAAZ,SAAuBmB,KAAKT,MAAMe,OAClC,uBACEM,MAAO3B,EACP4B,KAAK,OACLT,MAAOJ,KAAKR,MAAME,KAClBoB,SAAU,SAACC,GAAD,OAAW,EAAKC,QAAQD,EAAME,OAAOb,QAC/Cc,YAAY,kBAEd,wBACEN,MAAOxB,EACP+B,QAASnB,KAAKL,YACdyB,SAA8B,KAApBpB,KAAKR,MAAME,KAHvB,sBAOA,oBAAIkB,MAAOvB,EAAX,SACGW,KAAKR,MAAMC,MAAM4B,KAAI,SAACC,GACrB,OACE,+BACGA,EAAKhB,KACN,wBACEa,QAAS,WACP,EAAKtB,WAAWyB,EAAKf,KAEvBK,MAAOxB,EAJT,sBAFOkC,EAAKf,gB,GA9ETgB,IAAMC,WAgGzBC,IAASC,OACP,cAACpC,EAAD,CAAMgB,KAAM,iBACZqB,SAASC,eAAe,U","file":"static/js/main.54a2086e.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { nanoid } from \"nanoid\";\n\nconst display = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n};\nconst appTitle = {\n  margin: 20,\n  fontSize: 70,\n  alignSelf: \"center\",\n};\nconst input = {\n  margin: 20,\n  fontSize: 25,\n  height: 40,\n  width: 800,\n  alignSelf: \"center\",\n};\nconst submit = {\n  margin: 20,\n  fontSize: 20,\n  height: 40,\n  width: 130,\n  alignSelf: \"center\",\n};\nconst list = {\n  fontSize: 30,\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      task: \"\",\n    };\n    this.updateTasks = this.updateTasks.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n  }\n  // Checks if stored information exists and loads them as our starting state.\n  // Data is visible on our page.\n  UNSAFE_componentWillMount() {\n    localStorage.getItem(\"tasks\") &&\n      this.setState({\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")),\n      });\n  }\n  // Gets data of last entry.\n  newTask(value) {\n    this.setState({\n      task: value,\n    });\n  }\n  // Adds latest entered task throught input and becomes one of the objects in our tasks array and is also stored locally.\n  updateTasks() {\n    const newTasks = [...this.state.tasks];\n    this.setState(\n      {\n        tasks: [\n          {\n            name: this.state.task,\n            id: nanoid(3),\n          },\n          ...newTasks,\n        ],\n        task: \"\",\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n      }\n    );\n  }\n  // Removes task from our tasks array and local storage.\n  removeTask(id) {\n    const newTasks = [...this.state.tasks].filter((task) => task.id !== id);\n    this.setState(\n      {\n        tasks: [...newTasks],\n      },\n      () => {\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n      }\n    );\n  }\n\n  render() {\n    return (\n      <form style={display}>\n        <div style={appTitle}>{this.props.name}</div>\n        <input\n          style={input}\n          type=\"text\"\n          value={this.state.task}\n          onChange={(event) => this.newTask(event.target.value)}\n          placeholder=\"  Add Task...\"\n        />\n        <button\n          style={submit}\n          onClick={this.updateTasks}\n          disabled={this.state.task === \"\" ? true : false}\n        >\n          Add Task\n        </button>\n        <ul style={list}>\n          {this.state.tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.name}\n                <button\n                  onClick={() => {\n                    this.removeTask(item.id);\n                  }}\n                  style={submit}\n                >\n                  Remove\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </form>\n    );\n  }\n}\nReactDOM.render(\n  <ToDo name={\"ToDo Tracker\"} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}